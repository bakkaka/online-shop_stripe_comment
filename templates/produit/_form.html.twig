{{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': true, 'enctype': 'multipart/form-data'}}) }}
<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            {{ form_label(form.nom, 'Nom', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.nom, {'attr': {'class': 'form-control'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.nom) }}
            </div>
        </div>

        <div class="mb-3">
            {{ form_label(form.description, 'Description', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.description) }}
            </div>
        </div>

        <div class="mb-3">
            {{ form_label(form.categorie, 'Catégorie', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.categorie, {'attr': {'class': 'form-control'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.categorie) }}
            </div>
        </div>

        <div class="mb-3">
            {{ form_label(form.pays, 'Pays', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.pays, {'attr': {'class': 'form-control'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.pays) }}
            </div>
        </div>

        <div class="mb-3">
            {{ form_label(form.disponible, 'Disponible', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.disponible, {'attr': {'class': 'form-check-input'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.disponible) }}
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="mb-3">
            {{ form_label(form.stock, 'Stock', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.stock, {'attr': {'class': 'form-control'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.stock) }}
            </div>
        </div>

        <div class="mb-3">
            {{ form_label(form.etat, 'État', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.etat, {'attr': {'class': 'form-control'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.etat) }}
            </div>
        </div>

        <div class="mb-3">
            {{ form_label(form.prix, 'Prix', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.prix, {'attr': {'class': 'form-control', 'step': '0.01'}}) }}
            <div class="invalid-feedback">
                {{ form_errors(form.prix) }}
            </div>
        </div>

         
        <!-- Section Images -->
        <div class="mb-3">
            <label class="form-label">Images</label>
            <div class="images-container d-flex flex-wrap gap-3 mb-3"
                 data-prototype="{{ form_widget(form.images.vars.prototype)|e('html_attr') }}"
                 data-index="{{ form.images|length }}">
                {% for image in form.images %}
                <div class="image-item position-relative" style="width: 150px;">
                    <div class="image-preview-container mb-2">
                        {% if image.vars.data and image.vars.data.url %}
                        <img src="{{ asset('uploads/images/' ~ image.vars.data.url) }}" 
                             class="img-thumbnail w-100" 
                             style="height: 150px; object-fit: cover;">
                        {% endif %}
                    </div>
                    <div class="d-flex flex-column">
                        {{ form_widget(image.imageFile, {'attr': {'class': 'd-none'}}) }}
                        <button type="button" class="btn btn-sm btn-outline-primary choose-image">
                            Choisir
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger mt-1 remove-image">
                            Supprimer
                        </button>
                    </div>
                </div>
                {% endfor %}
            </div>
            <button type="button" class="btn btn-sm btn-primary add-image">
                <i class="bi bi-plus"></i> Ajouter une image
            </button>
        </div>
    


<button type="submit" class="btn btn-primary">{{ button_label|default('Enregistrer') }}</button>
{{ form_end(form) }}

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Container des images
    const container = document.querySelector('.images-container');
    const addButton = document.querySelector('.add-image');

    // Ajouter une nouvelle image
    addButton.addEventListener('click', function() {
        const prototype = container.dataset.prototype;
        const index = container.dataset.index;
        const newForm = prototype.replace(/__name__/g, index);
        
        const div = document.createElement('div');
        div.className = 'image-item position-relative';
        div.style.width = '150px';
        div.innerHTML = `
            <div class="image-preview-container mb-2"></div>
            <div class="d-flex flex-column">
                ${newForm}
                <button type="button" class="btn btn-sm btn-outline-primary choose-image">Choisir</button>
                <button type="button" class="btn btn-sm btn-outline-danger mt-1 remove-image">Supprimer</button>
            </div>
        `;
        
        container.appendChild(div);
        container.dataset.index = parseInt(index) + 1;
        
        // Masquer le input file par défaut
        const fileInput = div.querySelector('input[type="file"]');
        fileInput.classList.add('d-none');
        
        initImageItemEvents(div);
    });

    // Initialiser les événements pour chaque image
    function initImageItemEvents(item) {
        const fileInput = item.querySelector('input[type="file"]');
        const chooseBtn = item.querySelector('.choose-image');
        const removeBtn = item.querySelector('.remove-image');
        const previewContainer = item.querySelector('.image-preview-container');
        
        // Choisir une image
        chooseBtn.addEventListener('click', () => fileInput.click());
        
        // Supprimer une image
        removeBtn.addEventListener('click', () => item.remove());
        
        // Prévisualisation de l'image
        fileInput.addEventListener('change', function(e) {
            if (this.files && this.files[0]) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    previewContainer.innerHTML = `
                        <img src="${event.target.result}" 
                             class="img-thumbnail w-100" 
                             style="height: 150px; object-fit: cover;">
                    `;
                };
                reader.readAsDataURL(this.files[0]);
            }
        });
    }

    // Initialiser les images existantes
    document.querySelectorAll('.image-item').forEach(item => {
        initImageItemEvents(item);
    });
});
</script>
